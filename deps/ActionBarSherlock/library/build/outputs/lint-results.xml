<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 23.0.5">

    <issue
        id="InconsistentLayout"
        severity="Warning"
        message="The id &quot;abs__split_action_bar&quot; in layout &quot;abs__screen_action_bar&quot; is missing from the following layout configurations: layout-xlarge (present in layout)"
        category="Correctness"
        priority="6"
        summary="Checks that layout variations are consistent"
        explanation="This check ensures that a layout resource which is defined in multiple resource folders, specifies the same set of widgets.

This finds cases where you have accidentally forgotten to add a widget to all variations of the layout, which could result in a runtime crash for some resource configurations when a `findViewById()` fails.

There *are* cases where this is intentional. For example, you may have a dedicated large tablet layout which adds some extra widgets that are not present in the phone version of the layout. As long as the code accessing the layout resource is careful to handle this properly, it is valid. In that case, you can suppress this lint check for the given extra or missing views, or the whole layout"
        errorLine1="        android:id=&quot;@+id/abs__split_action_bar&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout\abs__screen_action_bar.xml"
            line="52"
            column="9"/>
    </issue>

    <issue
        id="InconsistentLayout"
        severity="Warning"
        message="The id &quot;abs__split_action_bar&quot; in layout &quot;abs__screen_action_bar_overlay&quot; is missing from the following layout configurations: layout-xlarge (present in layout)"
        category="Correctness"
        priority="6"
        summary="Checks that layout variations are consistent"
        explanation="This check ensures that a layout resource which is defined in multiple resource folders, specifies the same set of widgets.

This finds cases where you have accidentally forgotten to add a widget to all variations of the layout, which could result in a runtime crash for some resource configurations when a `findViewById()` fails.

There *are* cases where this is intentional. For example, you may have a dedicated large tablet layout which adds some extra widgets that are not present in the phone version of the layout. As long as the code accessing the layout resource is careful to handle this properly, it is valid. In that case, you can suppress this lint check for the given extra or missing views, or the whole layout"
        errorLine1="    &lt;com.actionbarsherlock.internal.widget.ActionBarContainer android:id=&quot;@+id/abs__split_action_bar&quot;"
        errorLine2="                                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout\abs__screen_action_bar_overlay.xml"
            line="53"
            column="63"/>
    </issue>

    <issue
        id="OldTargetApi"
        severity="Warning"
        message="Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the android.os.Build.VERSION_CODES javadoc for details."
        category="Correctness"
        priority="6"
        summary="Checks that the manifest specifies a targetSdkVersion that is recent"
        explanation="When your application runs on a version of Android that is more recent than your `targetSdkVersion` specifies that it has been tested with, various compatibility modes kick in. This ensures that your application continues to work, but it may look out of place. For example, if the `targetSdkVersion` is less than 14, your app may get an option button in the UI.

To fix this issue, set the `targetSdkVersion` to the highest available value. Then test your app to make sure everything works correctly. You may want to consult the compatibility notes to see what changes apply to each version you are adding support for: http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        url="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        urls="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        errorLine1="  &lt;uses-sdk android:minSdkVersion=&quot;7&quot; android:targetSdkVersion=&quot;17&quot;/>"
        errorLine2="                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\AndroidManifest.xml"
            line="3"
            column="39"/>
    </issue>

    <issue
        id="OldTargetApi"
        severity="Warning"
        message="Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the android.os.Build.VERSION_CODES javadoc for details."
        category="Correctness"
        priority="6"
        summary="Checks that the manifest specifies a targetSdkVersion that is recent"
        explanation="When your application runs on a version of Android that is more recent than your `targetSdkVersion` specifies that it has been tested with, various compatibility modes kick in. This ensures that your application continues to work, but it may look out of place. For example, if the `targetSdkVersion` is less than 14, your app may get an option button in the UI.

To fix this issue, set the `targetSdkVersion` to the highest available value. Then test your app to make sure everything works correctly. You may want to consult the compatibility notes to see what changes apply to each version you are adding support for: http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        url="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        urls="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        errorLine1="        targetSdkVersion 19"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\build.gradle"
            line="32"
            column="9"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute &quot;dividerPadding&quot; is only used in API level 11 and higher (current min is 8)"
        category="Correctness"
        priority="6"
        summary="Finds usages of attributes that will not be used (read) on all targeted versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="     android:dividerPadding=&quot;12dip&quot;"
        errorLine2="     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout\abs__action_menu_layout.xml"
            line="22"
            column="6"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute &quot;textAllCaps&quot; is only used in API level 14 and higher (current min is 8)"
        category="Correctness"
        priority="6"
        summary="Finds usages of attributes that will not be used (read) on all targeted versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="              android:textAllCaps=&quot;true&quot;"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout-large\abs__action_mode_close_item.xml"
            line="38"
            column="15"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute &quot;state_activated&quot; is only used in API level 11 and higher (current min is 8)"
        category="Correctness"
        priority="6"
        summary="Finds usages of attributes that will not be used (read) on all targeted versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="    &lt;item android:state_activated=&quot;true&quot; android:drawable=&quot;@drawable/abs__list_activated_holo&quot; />"
        errorLine2="          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\drawable\abs__activated_background_holo_dark.xml"
            line="18"
            column="11"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute &quot;state_activated&quot; is only used in API level 11 and higher (current min is 8)"
        category="Correctness"
        priority="6"
        summary="Finds usages of attributes that will not be used (read) on all targeted versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="    &lt;item android:state_activated=&quot;true&quot; android:drawable=&quot;@drawable/abs__list_activated_holo&quot; />"
        errorLine2="          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\drawable\abs__activated_background_holo_light.xml"
            line="18"
            column="11"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute &quot;state_activated&quot; is only used in API level 11 and higher (current min is 8)"
        category="Correctness"
        priority="6"
        summary="Finds usages of attributes that will not be used (read) on all targeted versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="    &lt;item android:state_activated=&quot;true&quot; android:color=&quot;@color/abs__bright_foreground_holo_dark&quot;/>"
        errorLine2="          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\color\abs__primary_text_holo_dark.xml"
            line="22"
            column="11"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute &quot;state_activated&quot; is only used in API level 11 and higher (current min is 8)"
        category="Correctness"
        priority="6"
        summary="Finds usages of attributes that will not be used (read) on all targeted versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="    &lt;item android:state_activated=&quot;true&quot; android:color=&quot;@color/abs__bright_foreground_holo_light&quot;/>"
        errorLine2="          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\color\abs__primary_text_holo_light.xml"
            line="22"
            column="11"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute &quot;splitMotionEvents&quot; is only used in API level 11 and higher (current min is 8)"
        category="Correctness"
        priority="6"
        summary="Finds usages of attributes that will not be used (read) on all targeted versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="    android:splitMotionEvents=&quot;false&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout-xlarge\abs__screen_action_bar.xml"
            line="24"
            column="5"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute &quot;splitMotionEvents&quot; is only used in API level 11 and higher (current min is 8)"
        category="Correctness"
        priority="6"
        summary="Finds usages of attributes that will not be used (read) on all targeted versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="    android:splitMotionEvents=&quot;false&quot;>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout\abs__screen_action_bar.xml"
            line="26"
            column="5"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute &quot;splitMotionEvents&quot; is only used in API level 11 and higher (current min is 8)"
        category="Correctness"
        priority="6"
        summary="Finds usages of attributes that will not be used (read) on all targeted versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="    android:splitMotionEvents=&quot;false&quot;>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout-xlarge\abs__screen_action_bar_overlay.xml"
            line="24"
            column="5"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute &quot;splitMotionEvents&quot; is only used in API level 11 and higher (current min is 8)"
        category="Correctness"
        priority="6"
        summary="Finds usages of attributes that will not be used (read) on all targeted versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.

Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="    android:splitMotionEvents=&quot;false&quot;>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout\abs__screen_action_bar_overlay.xml"
            line="26"
            column="5"/>
    </issue>

    <issue
        id="GradleOverrides"
        severity="Warning"
        message="This minSdkVersion value (7) is not used; it is always overridden by the value specified in the Gradle build script (8)"
        category="Correctness"
        priority="4"
        summary="Looks for values specified in the manifest file which are overridden by values in Gradle"
        explanation="The value of (for example) `minSdkVersion` is only used if it is not specified in the `build.gradle` build scripts. When specified in the Gradle build scripts, the manifest value is ignored and can be misleading, so should be removed to avoid ambiguity."
        errorLine1="  &lt;uses-sdk android:minSdkVersion=&quot;7&quot; android:targetSdkVersion=&quot;17&quot;/>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\AndroidManifest.xml"
            line="3"
            column="13"/>
    </issue>

    <issue
        id="GradleOverrides"
        severity="Warning"
        message="This targetSdkVersion value (17) is not used; it is always overridden by the value specified in the Gradle build script (19)"
        category="Correctness"
        priority="4"
        summary="Looks for values specified in the manifest file which are overridden by values in Gradle"
        explanation="The value of (for example) `minSdkVersion` is only used if it is not specified in the `build.gradle` build scripts. When specified in the Gradle build scripts, the manifest value is ignored and can be misleading, so should be removed to avoid ambiguity."
        errorLine1="  &lt;uses-sdk android:minSdkVersion=&quot;7&quot; android:targetSdkVersion=&quot;17&quot;/>"
        errorLine2="                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\AndroidManifest.xml"
            line="3"
            column="39"/>
    </issue>

    <issue
        id="FloatMath"
        severity="Warning"
        message="Use java.lang.Math#floor instead of android.util.FloatMath#floor() since it is faster as of API 8"
        category="Performance"
        priority="3"
        summary="Suggests replacing `android.util.FloatMath` calls with `java.lang.Math`"
        explanation="In older versions of Android, using `android.util.FloatMath` was recommended for performance reasons when operating on floats. However, on modern hardware doubles are just as fast as float (though they take more memory), and in recent versions of Android, `FloatMath` is actually slower than using `java.lang.Math` due to the way the JIT optimizes `java.lang.Math`. Therefore, you should use `Math` instead of `FloatMath` if you are only targeting Froyo and above."
        url="http://developer.android.com/guide/practices/design/performance.html#avoidfloat"
        urls="http://developer.android.com/guide/practices/design/performance.html#avoidfloat"
        errorLine1="                (int) FloatMath.floor(after.left),"
        errorLine2="                                ~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\src\com\actionbarsherlock\internal\nineoldandroids\view\animation\AnimatorProxy.java"
            line="150"
            column="33"/>
    </issue>

    <issue
        id="FloatMath"
        severity="Warning"
        message="Use java.lang.Math#floor instead of android.util.FloatMath#floor() since it is faster as of API 8"
        category="Performance"
        priority="3"
        summary="Suggests replacing `android.util.FloatMath` calls with `java.lang.Math`"
        explanation="In older versions of Android, using `android.util.FloatMath` was recommended for performance reasons when operating on floats. However, on modern hardware doubles are just as fast as float (though they take more memory), and in recent versions of Android, `FloatMath` is actually slower than using `java.lang.Math` due to the way the JIT optimizes `java.lang.Math`. Therefore, you should use `Math` instead of `FloatMath` if you are only targeting Froyo and above."
        url="http://developer.android.com/guide/practices/design/performance.html#avoidfloat"
        urls="http://developer.android.com/guide/practices/design/performance.html#avoidfloat"
        errorLine1="                (int) FloatMath.floor(after.top),"
        errorLine2="                                ~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\src\com\actionbarsherlock\internal\nineoldandroids\view\animation\AnimatorProxy.java"
            line="151"
            column="33"/>
    </issue>

    <issue
        id="FloatMath"
        severity="Warning"
        message="Use java.lang.Math#ceil instead of android.util.FloatMath#ceil() since it is faster as of API 8"
        category="Performance"
        priority="3"
        summary="Suggests replacing `android.util.FloatMath` calls with `java.lang.Math`"
        explanation="In older versions of Android, using `android.util.FloatMath` was recommended for performance reasons when operating on floats. However, on modern hardware doubles are just as fast as float (though they take more memory), and in recent versions of Android, `FloatMath` is actually slower than using `java.lang.Math` due to the way the JIT optimizes `java.lang.Math`. Therefore, you should use `Math` instead of `FloatMath` if you are only targeting Froyo and above."
        url="http://developer.android.com/guide/practices/design/performance.html#avoidfloat"
        urls="http://developer.android.com/guide/practices/design/performance.html#avoidfloat"
        errorLine1="                (int) FloatMath.ceil(after.right),"
        errorLine2="                                ~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\src\com\actionbarsherlock\internal\nineoldandroids\view\animation\AnimatorProxy.java"
            line="152"
            column="33"/>
    </issue>

    <issue
        id="FloatMath"
        severity="Warning"
        message="Use java.lang.Math#ceil instead of android.util.FloatMath#ceil() since it is faster as of API 8"
        category="Performance"
        priority="3"
        summary="Suggests replacing `android.util.FloatMath` calls with `java.lang.Math`"
        explanation="In older versions of Android, using `android.util.FloatMath` was recommended for performance reasons when operating on floats. However, on modern hardware doubles are just as fast as float (though they take more memory), and in recent versions of Android, `FloatMath` is actually slower than using `java.lang.Math` due to the way the JIT optimizes `java.lang.Math`. Therefore, you should use `Math` instead of `FloatMath` if you are only targeting Froyo and above."
        url="http://developer.android.com/guide/practices/design/performance.html#avoidfloat"
        urls="http://developer.android.com/guide/practices/design/performance.html#avoidfloat"
        errorLine1="                (int) FloatMath.ceil(after.bottom));"
        errorLine2="                                ~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\src\com\actionbarsherlock\internal\nineoldandroids\view\animation\AnimatorProxy.java"
            line="153"
            column="33"/>
    </issue>

    <issue
        id="IconMissingDensityFolder"
        severity="Warning"
        message="Missing density variation folders in res: drawable-xxhdpi"
        category="Usability:Icons"
        priority="3"
        summary="Ensures that all the density folders are present"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra-high, extra-extra-high). This lint check identifies folders which are missing, such as `drawable-hdpi`.
Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="com/actionbarsherlock/internal/widget/IcsListPopupWindow$PopupTouchInterceptor#onTouch should call View#performClick when a click is detected"
        category="Accessibility"
        priority="6"
        summary="Checks that custom views handle accessibility on click events"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="        public boolean onTouch(View v, MotionEvent event) {"
        errorLine2="                       ~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\src\com\actionbarsherlock\internal\widget\IcsListPopupWindow.java"
            line="631"
            column="24"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Warning"
        message="When you define paddingRight you should probably also define paddingLeft for right-to-left symmetry"
        category="Bi-directional Text"
        priority="6"
        summary="Ensures that specifying padding on one side is matched by padding on the other"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="              android:paddingRight=&quot;16dip&quot;"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout\abs__action_bar_title_item.xml"
            line="21"
            column="15"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Warning"
        message="When you define paddingLeft you should probably also define paddingRight for right-to-left symmetry"
        category="Bi-directional Text"
        priority="6"
        summary="Ensures that specifying padding on one side is matched by padding on the other"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="        android:paddingLeft=&quot;8dip&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout-large\abs__action_mode_close_item.xml"
            line="21"
            column="9"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Warning"
        message="When you define paddingRight you should probably also define paddingLeft for right-to-left symmetry"
        category="Bi-directional Text"
        priority="6"
        summary="Ensures that specifying padding on one side is matched by padding on the other"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="    android:paddingRight=&quot;16dip&quot;>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout\abs__popup_menu_item_layout.xml"
            line="21"
            column="5"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;Gravity.START&quot; instead of &quot;Gravity.LEFT&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            @ViewDebug.IntToString(from = Gravity.LEFT,              to = &quot;LEFT&quot;),"
        errorLine2="                                                  ~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\src\com\actionbarsherlock\app\ActionBar.java"
            line="913"
            column="51"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;Gravity.END&quot; instead of &quot;Gravity.RIGHT&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            @ViewDebug.IntToString(from = Gravity.RIGHT,             to = &quot;RIGHT&quot;),"
        errorLine2="                                                  ~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\src\com\actionbarsherlock\app\ActionBar.java"
            line="914"
            column="51"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;Gravity.START&quot; instead of &quot;Gravity.LEFT&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            this.gravity = Gravity.CENTER_VERTICAL | Gravity.LEFT;"
        errorLine2="                                                             ~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\src\com\actionbarsherlock\app\ActionBar.java"
            line="934"
            column="62"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;Gravity.START&quot; instead of &quot;Gravity.LEFT&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="    private static final int DEFAULT_CUSTOM_GRAVITY = Gravity.LEFT | Gravity.CENTER_VERTICAL;"
        errorLine2="                                                              ~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\src\com\actionbarsherlock\internal\widget\ActionBarView.java"
            line="86"
            column="63"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;Gravity.START&quot; instead of &quot;Gravity.LEFT&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                    hgravity = Gravity.LEFT;"
        errorLine2="                                       ~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\src\com\actionbarsherlock\internal\widget\ActionBarView.java"
            line="1070"
            column="40"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;Gravity.END&quot; instead of &quot;Gravity.RIGHT&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                    hgravity = Gravity.RIGHT;"
        errorLine2="                                       ~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\src\com\actionbarsherlock\internal\widget\ActionBarView.java"
            line="1072"
            column="40"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;Gravity.START&quot; instead of &quot;Gravity.LEFT&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                hgravity = Gravity.LEFT;"
        errorLine2="                                   ~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\src\com\actionbarsherlock\internal\widget\ActionBarView.java"
            line="1075"
            column="36"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;Gravity.START&quot; instead of &quot;Gravity.LEFT&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                case Gravity.LEFT:"
        errorLine2="                             ~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\src\com\actionbarsherlock\internal\widget\ActionBarView.java"
            line="1083"
            column="30"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;Gravity.END&quot; instead of &quot;Gravity.RIGHT&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                case Gravity.RIGHT:"
        errorLine2="                             ~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\src\com\actionbarsherlock\internal\widget\ActionBarView.java"
            line="1086"
            column="30"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;Gravity.END&quot; instead of &quot;Gravity.RIGHT&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            cheatSheet.setGravity(Gravity.TOP | Gravity.RIGHT,"
        errorLine2="                                                        ~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\src\com\actionbarsherlock\internal\view\menu\ActionMenuItemView.java"
            line="270"
            column="57"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;Gravity.START&quot; instead of &quot;Gravity.LEFT&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            return (clip) ? new ClipDrawable(shapeDrawable, Gravity.LEFT,"
        errorLine2="                                                                    ~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\src\com\actionbarsherlock\internal\widget\IcsProgressBar.java"
            line="389"
            column="69"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;Gravity.START&quot; instead of &quot;Gravity.LEFT&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                gravity |= Gravity.LEFT;"
        errorLine2="                                   ~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\src\com\actionbarsherlock\internal\widget\IcsSpinner.java"
            line="163"
            column="36"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;Gravity.END&quot; instead of &quot;Gravity.RIGHT&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            case Gravity.RIGHT:"
        errorLine2="                         ~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\src\com\actionbarsherlock\internal\widget\IcsSpinner.java"
            line="286"
            column="26"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;Gravity.START&quot; instead of &quot;Gravity.LEFT&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);"
        errorLine2="                                   ~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\src\com\actionbarsherlock\internal\widget\ScrollingTabContainerView.java"
            line="381"
            column="36"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;start&quot; instead of &quot;left&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="               android:layout_gravity=&quot;center_vertical|left&quot;"
        errorLine2="               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout\abs__action_bar_home.xml"
            line="24"
            column="16"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding android:layout_marginEnd=&quot;-8dip&quot; to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="               android:layout_marginRight=&quot;-8dip&quot; />"
        errorLine2="               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout\abs__action_bar_home.xml"
            line="28"
            column="16"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding android:layout_marginEnd=&quot;8dip&quot; to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="               android:layout_marginRight=&quot;8dip&quot;"
        errorLine2="               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout\abs__action_bar_home.xml"
            line="32"
            column="16"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding android:paddingEnd=&quot;16dip&quot; to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="              android:paddingRight=&quot;16dip&quot;"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout\abs__action_bar_title_item.xml"
            line="21"
            column="15"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;start&quot; instead of &quot;left&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="               android:layout_gravity=&quot;center_vertical|left&quot;"
        errorLine2="               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout\abs__action_bar_title_item.xml"
            line="27"
            column="16"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;start&quot; instead of &quot;left&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                  android:layout_gravity=&quot;center_vertical|left&quot;"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout\abs__action_bar_title_item.xml"
            line="34"
            column="19"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding android:paddingStart=&quot;8dip&quot; to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:paddingLeft=&quot;8dip&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout-large\abs__action_mode_close_item.xml"
            line="21"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding android:layout_marginEnd=&quot;16dip&quot; to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_marginRight=&quot;16dip&quot;>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout-large\abs__action_mode_close_item.xml"
            line="25"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding android:layout_marginStart=&quot;4dip&quot; to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="              android:layout_marginLeft=&quot;4dip&quot;"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout-large\abs__action_mode_close_item.xml"
            line="34"
            column="15"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding android:layout_marginEnd=&quot;16dip&quot; to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="              android:layout_marginRight=&quot;16dip&quot;"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout-large\abs__action_mode_close_item.xml"
            line="35"
            column="15"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding android:layout_marginEnd=&quot;8dip&quot; to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:layout_marginRight=&quot;8dip&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout\abs__activity_chooser_view_list_item.xml"
            line="37"
            column="13"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding android:layout_marginStart=&quot;8dip&quot; to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="    android:layout_marginLeft=&quot;8dip&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout\abs__list_menu_item_icon.xml"
            line="22"
            column="5"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding android:layout_marginEnd=&quot;-8dip&quot; to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="    android:layout_marginRight=&quot;-8dip&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout\abs__list_menu_item_icon.xml"
            line="23"
            column="5"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding android:paddingEnd=&quot;16dip&quot; to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="    android:paddingRight=&quot;16dip&quot;>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout\abs__popup_menu_item_layout.xml"
            line="21"
            column="5"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding android:layout_marginStart=&quot;16dip&quot; to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_marginLeft=&quot;16dip&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout\abs__popup_menu_item_layout.xml"
            line="31"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding android:layout_alignParentStart=&quot;true&quot; to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:layout_alignParentLeft=&quot;true&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout\abs__popup_menu_item_layout.xml"
            line="39"
            column="13"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding android:layout_alignParentStart=&quot;true&quot; to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:layout_alignParentLeft=&quot;true&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout\abs__popup_menu_item_layout.xml"
            line="51"
            column="13"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding android:paddingStart=&quot;@dimen/abs__dropdownitem_text_padding_left&quot; to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                android:paddingLeft=&quot;@dimen/abs__dropdownitem_text_padding_left&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout\abs__search_dropdown_item_icons_2line.xml"
            line="22"
            column="17"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding android:paddingEnd=&quot;4dip&quot; to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                android:paddingRight=&quot;4dip&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout\abs__search_dropdown_item_icons_2line.xml"
            line="23"
            column="17"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding android:layout_alignParentStart=&quot;true&quot; to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="               android:layout_alignParentLeft=&quot;true&quot;"
        errorLine2="               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout\abs__search_dropdown_item_icons_2line.xml"
            line="33"
            column="16"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding android:layout_alignParentEnd=&quot;true&quot; to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="               android:layout_alignParentRight=&quot;true&quot;"
        errorLine2="               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout\abs__search_dropdown_item_icons_2line.xml"
            line="42"
            column="16"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding android:layout_toStartOf=&quot;@id/edit_query&quot; to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="               android:layout_toLeftOf=&quot;@id/edit_query&quot;"
        errorLine2="               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout\abs__search_dropdown_item_icons_2line.xml"
            line="54"
            column="16"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding android:layout_toEndOf=&quot;@android:id/icon1&quot; to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="              android:layout_toRightOf=&quot;@android:id/icon1&quot;"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout\abs__search_dropdown_item_icons_2line.xml"
            line="70"
            column="15"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding android:layout_toStartOf=&quot;@android:id/icon2&quot; to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="              android:layout_toLeftOf=&quot;@android:id/icon2&quot;"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout\abs__search_dropdown_item_icons_2line.xml"
            line="71"
            column="15"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding android:layout_toEndOf=&quot;@android:id/icon1&quot; to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="              android:layout_toRightOf=&quot;@android:id/icon1&quot;"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout\abs__search_dropdown_item_icons_2line.xml"
            line="85"
            column="15"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding android:layout_toStartOf=&quot;@android:id/icon2&quot; to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="              android:layout_toLeftOf=&quot;@android:id/icon2&quot;"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout\abs__search_dropdown_item_icons_2line.xml"
            line="86"
            column="15"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding android:layout_marginStart=&quot;@dimen/abs__dropdownitem_text_padding_left&quot; to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                android:layout_marginLeft=&quot;@dimen/abs__dropdownitem_text_padding_left&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout\abs__search_view.xml"
            line="68"
            column="17"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding android:paddingStart=&quot;@dimen/abs__dropdownitem_text_padding_left&quot; to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                  android:paddingLeft=&quot;@dimen/abs__dropdownitem_text_padding_left&quot;"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout\abs__search_view.xml"
            line="92"
            column="19"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider adding android:paddingEnd=&quot;@dimen/abs__dropdownitem_text_padding_right&quot; to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Looks for hardcoded left/right constants which could be start/end for bidirectional text"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                  android:paddingRight=&quot;@dimen/abs__dropdownitem_text_padding_right&quot;"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Work\jui\com.juick.android\deps\ActionBarSherlock\library\res\layout\abs__search_view.xml"
            line="93"
            column="19"/>
    </issue>

</issues>
